name: Flutter Build with Permissions

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: 'URL of the source ZIP to build'
        required: true
        type: string

env:
  ZIP_FILE: source.zip
  SRC_DIR: source

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Download ZIP from input
        run: |
          echo "Downloading ${{ github.event.inputs.zip_url }}"
          curl -L \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.event.inputs.zip_url }}" \
            -o source.zip
          
          # Test and extract ZIP
          unzip -t source.zip || echo "ZIP test completed with warnings"
          unzip -q source.zip -d source
          
          echo "Extracted files:"
          ls -la source/

      - name: Install JDK (required by Android build)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Enhanced caching for Flutter & Dart
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            source/.dart_tool
            source/.flutter-plugins
            source/.flutter-plugins-dependencies
          key: ${{ runner.os }}-flutter-${{ hashFiles('source/**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # Enhanced Gradle caching
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            source/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('source/**/*.gradle*', 'source/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Cache Android build files
      - name: Cache Android build files
        uses: actions/cache@v4
        with:
          path: |
            source/build
            source/android/app/build
          key: ${{ runner.os }}-android-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Step 1 - Flutter create with Android platform
        working-directory: ./source
        run: |
          echo "=== STEP 1: Running flutter create . --platforms=android ==="
          flutter create . --platforms=android
          echo "Flutter create completed successfully"

      - name: Step 2 - Add Internet Permission
        working-directory: ./source
        run: |
          echo "=== STEP 2: Adding android.permission.INTERNET ==="
          
          # Path to Android manifest
          MANIFEST_PATH="android/app/src/main/AndroidManifest.xml"
          
          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "ERROR: AndroidManifest.xml not found at $MANIFEST_PATH"
            exit 1
          fi
          
          # Check if permission already exists
          if grep -q "android.permission.INTERNET" "$MANIFEST_PATH"; then
            echo "INTERNET permission already exists"
          else
            echo "Adding INTERNET permission to AndroidManifest.xml"
            
            # Add the permission before the <application> tag
            sed -i '/<application/i\    <uses-permission android:name="android.permission.INTERNET" />' "$MANIFEST_PATH"
            
            echo "Permission added successfully"
          fi
          
          # Verify the permission was added
          echo "Current permissions in manifest:"
          grep -n "uses-permission" "$MANIFEST_PATH" || echo "No uses-permission tags found"

      - name: Accept Android licenses
        run: |
          echo "=== Accepting Android licenses ==="
          yes | sdkmanager --licenses || true

      - name: Flutter pub get
        working-directory: ./source
        run: |
          echo "Getting Flutter dependencies..."
          flutter pub get

      # Configure Gradle build options for better performance
      - name: Configure Gradle for CI
        working-directory: ./source
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "org.gradle.daemon=false" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties

      - name: Flutter build APK (release)
        working-directory: ./source
        env:
          CI: true
        run: |
          echo "=== Running flutter build apk --release ==="
          flutter build apk --release
          echo "APK build completed successfully"
          
          # Show build output location
          echo "Built APK location:"
          find build/app/outputs -name "*.apk" -type f

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version

      # Authenticate to Firebase
      - name: Firebase Authentication
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json
          firebase login:ci --no-localhost

      - name: Extract APK Info
        id: apk_info
        working-directory: ./source
        run: |
          APK_PATH=$(find build/app/outputs -name "*.apk" -type f | head -1)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          
          # Try to extract version info from the APK
          if [ -x "$(command -v aapt)" ]; then
            VERSION_CODE=$(aapt dump badging "$APK_PATH" | grep versionCode | sed "s/.*versionCode='\([0-9]*\).*/\1/")
            VERSION_NAME=$(aapt dump badging "$APK_PATH" | grep versionName | sed "s/.*versionName='\([^']*\).*/\1/")
            echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
            echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          else
            echo "version_code=unknown" >> $GITHUB_OUTPUT
            echo "version_name=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
          fi
          
          # Get the file size
          FILE_SIZE=$(stat -c%s "$APK_PATH")
          echo "file_size=$FILE_SIZE" >> $GITHUB_OUTPUT
          
          # Generate MD5 hash for the APK
          APK_HASH=$(md5sum "$APK_PATH" | cut -d ' ' -f 1)
          echo "apk_hash=$APK_HASH" >> $GITHUB_OUTPUT
          
          # Generate timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      # Upload APK to Firebase Storage
      - name: Upload to Firebase Storage
        id: firebase_upload
        run: |
          APK_PATH="${{ steps.apk_info.outputs.apk_path }}"
          APP_NAME="${{ github.event.inputs.app_name }}"
          VERSION="${{ github.event.inputs.version_name }}"
          TIMESTAMP="${{ steps.apk_info.outputs.timestamp }}"
          
          # Create a unique filename
          FILENAME="${APP_NAME}_${VERSION}_${TIMESTAMP}.apk"
          STORAGE_PATH="apps/${APP_NAME}/${VERSION}/${FILENAME}"
          
          # Upload to Firebase Storage
          firebase storage:upload --project ${{ secrets.FIREBASE_PROJECT_ID }} "$APK_PATH" "gs://${{ secrets.FIREBASE_STORAGE_BUCKET }}/$STORAGE_PATH"
          
          # Get the download URL
          DOWNLOAD_URL=$(firebase storage:url --project ${{ secrets.FIREBASE_PROJECT_ID }} "gs://${{ secrets.FIREBASE_STORAGE_BUCKET }}/$STORAGE_PATH")
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "storage_path=$STORAGE_PATH" >> $GITHUB_OUTPUT

      # Update Firestore with APK metadata
      - name: Update Firestore
        run: |
          # Create JSON document for Firestore
          cat > apk_metadata.json << EOL
          {
            "appName": "${{ github.event.inputs.app_name }}",
            "versionName": "${{ github.event.inputs.version_name }}",
            "versionCode": "${{ steps.apk_info.outputs.version_code }}",
            "buildTimestamp": "${{ steps.apk_info.outputs.timestamp }}",
            "fileSize": ${{ steps.apk_info.outputs.file_size }},
            "md5Hash": "${{ steps.apk_info.outputs.apk_hash }}",
            "downloadUrl": "${{ steps.firebase_upload.outputs.download_url }}",
            "storagePath": "${{ steps.firebase_upload.outputs.storage_path }}",
            "buildId": "${{ github.run_id }}",
            "buildNumber": "${{ github.run_number }}",
            "buildType": "release",
            "platform": "android",
            "updatedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOL
          
          # Add to Firestore using Firebase CLI
          firebase firestore:set --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            "app_builds/${{ steps.apk_info.outputs.timestamp }}" \
            --document-id "${{ steps.apk_info.outputs.timestamp }}" \
            --data-file apk_metadata.json
          
          # Also update a 'latest' document for this app
          firebase firestore:set --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            "apps/${{ github.event.inputs.app_name }}/latest_android" \
            --document-id "latest" \
            --data-file apk_metadata.json

      - name: Output Build Info
        run: |
          echo "✅ Build Completed Successfully"
          echo "📱 App: ${{ github.event.inputs.app_name }}"
          echo "📦 Version: ${{ github.event.inputs.version_name }}"
          echo "🔗 Download URL: ${{ steps.firebase_upload.outputs.download_url }}"
          echo "📁 Firebase Storage Path: ${{ steps.firebase_upload.outputs.storage_path }}"
          echo "🔄 Firestore Document: apps/${{ github.event.inputs.app_name }}/latest_android/latest"
